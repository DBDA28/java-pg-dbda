Day 1

1. Ensure that you have followed "day1-data\day1_help\Installation instructions for JDK n IDE.txt" & installed JDK 11 on your computer. 
Confirm that you have also downloaded Eclipse IDE (STS 3.9.18)

2. Edit System environment variable "Path"
Must have 1st entry in the Path as : <JDK>/bin
(Already shown in the theory session)

3. Revise class work using 
3.1 Refer to "day1-data\day1_help\sequence.txt
3.2 Refer to code samples from : day1-data\code\day1\src

4. Go through "day1-data\day1_help\slides\PPTDay1.pdf"

5. Go through some of the readymade code samples given for practice.
day1-data\day1_help\rdy_code\Test1.txt, Test2.txt ,Test3.txt, Test4.txt
(Refer to while & switch-case syntax carefully)
 
6. Solve
Mandatory assignment
The java program should run till user enters "quit" or any other option than add or sub or mult or div.
Prompt user to enter the input operation : (add|sub|mult|div) & 2 numbers(double)
Display the result of the operation.
Use Scanner for accepting all inputs from user. 
Hint : use switch-case

Optional Work

7. Accept range of numbers (begin value & end value) from user , using scanner.
Print all prime nos from the range
Try writing the functionality of checking for prime number in a method n call it from main

8.Accept range of numbers (begin value & end value) from user , using scanner.
Print all even nos from the range
Try writing the functionality of checking for even number in a method n call it from main

Accept range of numbers (begin value & end value) from user , using scanner.
Print all prime nos from the range
Try writing the functionality of checking for prime number in a method n call it from main


9. Find the compound interest n the amount 
Accept principle , interest rate n time period in years from user , using scanner.
Formula : 
Compound Interest=Principle*(1+(rate / 100))^time â€“ Principle
time : time period in years.

10. Accept 2 numbers from user n swap them n display.



Day 2

1. Refer to today's sequence : "day2-data\day2_help\sequence.txt" & today's code samples for revision.

Important Readmes 
Today's : sequence.txt
day2-data\day2_help\readmes\Regarding Java Data Types.txt
day2-data\day2_help\readmes\regarding class n object.txt
day2-data\day2_help\readmes\regarding GC  (read 1st half only)
day2-data\day2_help\readmes\regarding packages

2. Try to complete pending assignments.

3. Solve 
Create a java application for the following.

3.1 Create a Customer class , with data members (all private : tight encapsulation)
name(String),email(String),age(int), creditLimit(double)

Do not supply any constructor first(this is to confirm a default constructor)
Add a method to return all customer details , in a string .

3.2 Create RegisterCustomer class with main method
Create a customer class instance , using default constructor.
Display customer details.
Observe n conclude.

3.3 Now add a parameterized constructor to the  Customer class

3.4 Create RegisterCustomer2 class with main method
Accept customer details from user using scanner.
Display customer details.

4. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int level)
   {
     this.level=level;
   }
  public void setLevel(int level)
  {
    this.level=level;
  }
  public int getLevel()
  {
    return this.level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     System.out.println("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;
    System.out.println("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     System.out.println("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     System.out.println("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}

Are there any objects marked for GC ?


Day 3

0. import day3.2 as existing eclipse project in your workspace

1. Revise today's class work with sequence.txt n code samples.(from day3.1 n day3.2)
With lab faculty's help , do complete today's  assignments.

1.5 
Add a method to Box class to return a new Box with modified offset dims & test it with TestBox.java

eg : 1st Box dims 10,20,30
User enters offsets in dims  as 3,-4,5
2nd box should have dims 13,16,35
Hint in TestBox :
Box b1=new Box(sc.nextDouble(),sc.nextDouble(),sc.nextDouble());
sop("Enter offsets in dims : wOff , dOff hOff");
Box b2=b1.createNewBox(sc.nextDouble(),sc.nextDouble(),sc.nextDouble());

2.Solve 

Create a Point class Point2D  , under package "com.acts.geometry" for representing a point in x-y co-ordinate system.

2.1 Create a parameterized constructor to accept x & y co-ords.

2.2 Add public String show()) --to return point's x & y co-ords

2.3 Add equals method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise. : 

2.4 Write a Tester class to test your functionality , TestPoint.java , under the package "tester"
Create 2 points , using user supplied inputs
Display x , y co ordinates .
Display message "SAME" if 2 points are same , otherwise display "DIFFERENT"


Day 4
0. Refer to tdoay's sequence.txt

1. import day4.1 , to revise array of references  n static keyword

2. import day4.2 , to revise basics in inheritance 
2.1 Inheritance hierarchy
2.2constructor invocation (super keyword)


2.5 Pls go through inheritance readme , till the topics completed today.


3. What will happen ? (Mandatory)
(Guess the output along with memory diagrams) : Understand with lab faculty's help.
3.1 day4-data\assignments\params_passing
TestParamPassing1.java
TestParamPassing2.java
TestParamPassing3.java
TestParamPassing4.java

3.2 day4-data\assignments\test_static
TestStatic.java

4. Solve (Hands on) , with lab faculty's help
4.1 Continue with Day3's Point2D assignment.
4.2 Create new tester class , in the "tester" package "TestPointArray" , with main(..)
Ask user , how many points to plot? :
Create suitable array.
4.3 Accept x,y co-ordinates for all the points n store it suitably.
4.4 Display x,y co-ordinates of all the points plotted so far ,using for-each loop.
4.5 
 Accept 2 array indices from user .
Find out if the points at these indices are same or different (Hint : equals method)
Print the message accordingly.


Day 5
No new assignments , BUT completion of the pending work.
Please read : "day5-data\day5_help\readmes\readme inheritance_polymorphism.txt" ,atleast  till the parts covered in the classroom.

1. import day5.1 .
1.1 Refer to <arrays> package to revise direct init n nested arrays in Java
1.2 refer to Test2.java n inheritance hierarchy classes to revise 
method overriding : getDetails method

2. import day5.2
2.1 revise toString() from Object class n understand it's overriding
(Test1.java)
2.2 Revise upcasting n run time polymorphism
Test2.java n Test3.java
2.3 Refer to EventOrganizer1.java , to see the practical application.

3. Complete Player , CricketPlayer .... scenario.
(refer to today's whiteboard for details)
Test it by creating Player reference ---> CricketPlayer or TennisPlayer or FootballPlayer 
Revisit up casting n run time polymorphism


Day 6
1. important readmes/pics to go through
1.1 day5-data\day5_help\readmes\readme inheritance_polymorphism.txt
1.2 day5-data\day5_help\readmes\upcasting.txt
1.3 day6-data\day6_help\readmes\regarding instanceof.txt
1.4  day6-data\day6_help\readmes\regarding abstraction.txt

2. import day6.1 n revise
2.1 inheritance , run time polymorphism , upcasting , downcasting n instanceof keyword using 
Test1 ...Test6.java in <tester> package

2.2 Refer to EventOrganizer2.java , new option added 
Option 5

3. import day6.2 , to revise abstract methods n abstract classes

4. Hands on
Continue with Player scenario
(refer to day5's whiteboard for more details)
4.1 Add a functionality in the sub classes.
For CricketPlayer : add a method to obtain battingAverage
For FootballPlayer : add a method : defendGols
For TennisPlayer : add a method : acesServed

4.2 Can you add abstraction in the Player class ?
If yes : do it

4.3 Add a class TestPLayers in the tester package , with main(...)
Prompt user for max no of players.
Options
1. Add Cricket Player details
2. Add Football Player details
3. Add Tennis Player details
4. Display only name n country for all the players added.
5. Accept player no from user n invoke play method
6. Accept player no from user n invoke player specific method (eg : In case of a cricketplayer : battingAverage or in case of tennis player : acesServed etc.)

Day 7
NO major new assignments !
Complete pending work.
1. import day6.2 in your workspace. Add the interface Computable , as explained in "whiteboard" n test the application

2. import day7.1 in your workspace. 
Revise along with the readmes , interface , implementation class , upcasting , downcasting , run time polymorphism , instanceof usage.

3. import day7.2 to revise exception handling
Read the comments over the code sample , to understand it.
Revise : Exception handling inheritance hierarchy , checked vs un checked exceptions
Exception vs Error classes
Keywords : try,catch,throws , finally



Day 8
1. import day8.1 , to revise custom exception n all of the keywords
2. import day8.2 , to revise string n string builder in java
3. Solve (Mandatory assignment)  , with the help of lab faculty.
Develop core banking application
Requirements
3.1 Every Bank Account must have acct number(int) , customer name(string), account type (string) , account balance(double)
Unique ID of bank account is : account no.
Override equals method (with the help of lab faculty) , to replace ref. equality by acct no equality.: MUST be done.
Add withdraw n deposit methods in the bank account.
3.2 ValidationRules
1. account balance > min balance
2. account type can be either : SAVING | CHECKING | LOAN | FD 
Add validation methods . In case of failures , throw the custom exception.

3.3 Create Tester application : TestBanking
1.Use try-with-resources for creating scanner.
2. Accept  inputs for creating new account. 
i/ps : acct number,customer name, account type  , account balance
Validate inputs . In case of success , create the account n display it's details using toString (of BankAccount)
In case of failure , display error message , using catch-all
(centralized exc handling)
Create 2 accounts (at least)
3. Use equals method , to check if they are same or different.
4. Test withdraw n deposit methods.

Optional work.
If time permits , 
Create another tester 
Prompt bank manager(or bank staff) , max no of accounts
Menu
1. Create new account
i/ps : acct number,customer name, account type  , account balance
validations are must.

2. Deposit funds
i/p : acct number , deposit amount

3. Withdraw funds
i/p : acct number , withdrawl amount

4. Display all account details
(using for each loop)

5. Exit


Day 9

1. import day9.1 , to revise
Java 8 Date time handling , wrapper classes n enums

2. Complete Day 8's pending work.

3. Either import day9.2 , to see the complete solution to showroom management 
(Hint : Attach debugger , as shown in the class , to trace the flow of execution)
OR
try writing the solution on your own.



Day 10

1. import day10.1 , to revise generics n list of Java built in type : ArrayList<Integer>

2. import day10.2 , to revise COMPLETELY , working of ArrayList API


3. If time permits : try this (with lab faculty help)
Update earlier BankAccount assignment for the following options

Every Bank Account must have acct number(int) , customer name(string), pin (string) account type (enum : SAVING,CURRENT,FD,DMAT,LOAN) , account balance(double) , creation date(localdate)

Save Bank account details in the growable dynamic data structure : ArrayList
Allow any bank transactions(withdraw,deposit,funds transfer, close a/c) only after customer authentication.

Options
1. Create Bank Account
Accept all i/ps , validate . In case of success , create bank acct object n store it's reference in the ArrayList.

2. Netbanking Login
i/p : account no n pin (For this , will you modify your equals method ? I hope not !)
o/p : login successful or invalid login (throw custom exc )

3. Withdraw funds
i/p : amount to withdraw (no acct no here!!!!)
o/p : If customer has logged in successfully, then only allow withdraw.
O.w : throw the execption : indicating login(Authentication Failed : Can't Withdraw!!!!)

4. Deposit funds
i/p : amount to deposit (no acct no here!!!!)
o/p : If customer has logged in successfully, then only allow deposit.
O.w : throw the execption : indicating login(Authentication Failed : Can't Deposit!!!!)

5. Funds Transfer
i/p : dest acct no n transfer amount
o/p : If customer has logged in successfully,validate dest acct no n perform the transfer
O.w : throw the suitable custom execption , with error mesg.

6. Close Account
No inputs required
o/p : If customer has logged in successfully, then allow him to close the account
O.w : throw the suitable custom execption , with error mesg.

7. Log out 
No inputs required.
o/p : If customer has logged in successfully, then allow him to logout.

0. Exit.

