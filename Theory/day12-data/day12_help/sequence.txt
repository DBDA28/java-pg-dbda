Refer to "java8_new_features.txt"

Refer to "regarding lambdas"

Revise 

1. Functional interface =>  I/f containing  SAM + optionally default n static methods
eg : Runnable , Comparable , Comparator ... : existed before Java 8


New anno since Java 8 : @FunctionalInterface
New package  : java.util.function : consists of func i/fs ---Consumer, Supplier, Predicate,Function,BiConsumer

syntax of lambda expr in Java 
(args) -> {....}

IMPORTANT : Can func i/f be substituted by lambda expr ? YES
Why : since it holds single abstract behavior --which can be replaced by lambda expr

2. Enter Functional programming in Java
refer : "regarding lambdas"

1. Create your own functional interface n use it in lambda expression

eg : Perform ANY arithmetic operation on 2 double values & return the result
eg --add/multiply/subtract/divide....  ANY such operation !

1.1 Create i/f : SAM => Functional i/f
eg : Computable 

1.2 Create a Tester n use it.
Operations to perform : add/multiply/subtract/divide ....


1.3 Later : Create another i/f : ComputationUtils :  to add a static method
to return  result of  ANY operation performed on 2 double operands



Explore Existing higher order functions/methods

Solve :  

1.
Display all products (from a product list)
API :  Iterable : forEach 


2. 
Remove all the products of a specific category
Collection : removeIf


3. 
Display all products (from a product map)
Ans this 
Is Map Iterable ?
Can u attach DIRECTLY a for-each loop to the map ? 

Imperative style
for(Product p : map.values())
 sop(p);
Any Declarative (Functional prog solution ?)



4. Sort the products as per date : custom ordering
How ?


5 Use Function literal


6. Using above API(higher order funcs) , can you chain multiple operations like sorting & displaying the sorted data ? 

OR
Filter the elements n display filtered list. 

Objective : Accept product category from user
remove all products from specified category n display remaining list : multiple ops can't be chained !


3. Enter Java 8 Streams (Functional Streams)
3.1 Refer to <streams> : diagrams
collections vs streams n streams basics
3.2 Refer to "streams_sequence"


3.1  Display all product names of a particular category , exceeding specific price.
I/P category name & price.
(stream,2 filters,forEach)


3.2  Prompt user for category n discount.
Apply that discount on all products of specified category n print it.
i/p : category n discount

3.3 Continue with your student based scenario.
1. Display all student details from a student list

2. Display all student details(list) sorted as per GPA 
Use custom ordering

3. Write a tester to print average of  gpa of students for the specified course/subject
eg : i/p : course
Course c=Course.valueOf(sc.next().toUpperCase());
OptionalDouble optional=studentList.stream().filter(s -> s.getCourse() == c).mapToDouble(s -> s.getGPA()).average();
if(optional.isPresent())
 sop("Avg="+optional.get());

4 Print name of specified subject  topper
Hint : studentList ---stream --filter --max(comp based on GPA)

5 Print no of  failures for the specified subject chosen  from user.
(gpa < 5 : failed case)
Hint : studentMap -- values---Collection<Student> ----stream --filter(subject/course)---filter(GPA) --count 

6. Display all student details from a student map
Hint --studentMap--forEach(k,v -> sop(k+" "+v));
---------------------------------
3.1  Display all product names of a particular category , exceeding specific price.
I/P category name & price.
(stream,2 filters,forEach)


3.2  Prompt user for category n discount.
Apply that discount on all products of specified category n print it.
i/p : category n discount

3.3 Continue with your student based scenario.
1. Display all student details from a student list

2. Display all student details(list) sorted as per GPA 
Use custom ordering

3. Write a tester to print average of  gpa of students for the specified course/subject
eg : i/p : course


4 Print name of specified subject  topper
Hint : studentList ---stream --filter --max(comp based on GPA)

5 Print no of  failures for the specified subject chosen  from user.
(gpa < 5 : failed case)
Hint : studentMap -- values---Collection<Student> ----stream --filter(subject/course)---filter(GPA) --count 

6. Display all student details from a student map
