Revise through solving

Solve :  

1. Display all products (from a product list)
using internal iteration
eg : productList.forEach(p -> sop(p));


2.Display all products (from a product map)
eg : productMap.values().stream().forEach(p -> sop(p));
productMap.forEach((k,v)->sop(k+" "+v));


3. Apply discount to all the products from the products map
i/p : discount
double discount=sc.nextDouble();
productMap.forEach((k,v) -> v.setPrice(v.getPrice()-discount);


3.5 Accept date from user or hard code the date
Display no of products manufactured after specified date.

4. 
Filter all the products manufactured after specific date n add it in another  list by the name freshStock
i/p : date
LocalDate dt=LocalDate.parse(sc.next());




5. Display name of the cheapest product

5.1 Look at : findFirst, Optional : orElseThrow
5.2 sort all the products as per price , in desc order


6. In eCommerce app , you have collection of customers.
Can each customer have multiple phone nos?
Objective : Collect all the email ids of all the customers in emailList
Objective : Collect all the phone nos of all customers in the phone no list.
Sample data : day13.2


Lab work (optional)
7. List<Employee> appleEmps = new ArrayList<>(Arrays.asList
				(new Employee(100, "Riya", "Developer", "Apple", 85000),
				new Employee(200, "Rama", "Team Lead", "Apple", 80000),
				new Employee(300, "Mihir", "Dev Ops Eng", "Apple", 57000)));
		
		//display name of the emp earning max salary
		//display ids of all emps
		//average salary of all emps

8. List<Employee> samsungEmps = new ArrayList<>(
				Arrays.asList(new Employee(400, "Shekhar", "Developer", "Samsung", 60000),
						new Employee(500, "Kirti", "Data Scientist", "Samsung", 70000),
						new Employee(500, "Shubham", "Developer", "Samsung", 74000)));
n many more orgs.

Merge all of the lists to maintain common db of emps.
Display names of all developers.

What will happen ?
Stream<Product> productStrm=productList.stream();
long count=productStrm.count();
productStrm.forEach(System.out::println);



Enter I/O

Different devices
I/O Streams
INheritance hierarchy

Name the packages used for handling devices in Java : java.io, java.nio


java.io : In case of errs ---java.io.IOException

read/write methods :blocking or non blocking ? : blocking API

Java 8 Streams(Func. streams ) : represents pipeline of big data ops(aggregate ops) to be perfromed on seq. of elems derived from : arrays / collection /file....
eg : java.util.stream.Stream<T>,IntStream,LongStream,DoubleStream
eg of higher order funs : intermediate ops --filter,map,mapToDouble,sorted,flatMap
forEach,collect,count,sum,average : terminal ops
eg : empList.stream().filter(e.getDept() == dept) .count() --> no of emps from a specific dept

I/O Stream -- represent data transfer (bytes/chars) from/to java app to/from device(eg : file , pipe,socket,memory,console...)
For  reading data from data src into java  app : input stream
For  writing data to data sink from java  app :output stream

java.io --2 types of strms
1. Binary strms
2. char strms

Name 4 abstract super classes in I/O hierarchy :  InputStream,OutputStream,Reader,Writer

Node streams : device handling strms
File Handling strms : FIS,FOS,FR,FW
Buffering strms : BIS,BOS,BR,BW(PW)

Objective : 
1. Text files 
1.1 copy text files using buffering 

1.2 Suppose you have product details in a list/map. Can you store these details sorted as per price in a text file , in a buffered manner ?


2. Enter Binary file handling streams 
2.1 Node streams -- FileInputStream , FOS
2.2 Buffering of bin data : BIS , BOS



-------------------Pending --------------------------
2.3 Integration of Collection + I/O
Store n later restore the products from bin file

Steps
1. Get populated list of products --store these details in a bin file , using bin streams

1.1 Core classes  : Product , Category 

1.2 custom exc

1.3 ShopUtils --collection utils --
populate list
populate map


1.4 IOUtils -- i/f
add a static method --to store the  products in a bin file

        


1.5 Tester : StoreProductDetails --
Accept name of file from user n call our own API

2. Restore the product details from a bin file ---> Java App (List)


